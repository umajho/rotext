= 列表 =

[*[;有序:Ordered][;列表:List]*]对应于 HTML 之中的 [`ol`] 元素。每个有序[[#列表项序列|列表项序列]]_
会自动被包含在有序列表之中；[*[;无序:Unordered]列表*]对应于 HTML 之中的 [`ul`] 元素。每个无_
序[[#列表项序列|列表项序列]]会自动被包含在无序列表之中。

== 列表项序列 ==

相邻的有序[[#列表项|列表项]]组成[*有序列表项序列*]，相邻的无序_
[[#列表项|列表项]]组成[*无序列表项序列*]。

== 列表项 ==

[*有序列表[;项:Item]*]对应于 HTML 之中 [`ol`] 元素之下的 _
[`li`] 元素[*无序列表项*]对应于 HTML 之中 `ul` 元素之下的 `li` 元_
素。

; 开启 ::
> ; 有序列表项 :: [`#`] 及至少一个空白字符。
> ; 无序列表项 :: [`*`] 及至少一个空白字符。
; 延续 :: 下一行同一[[s:块级阶段#层|层]]开头，[`>`] 及至少一个空白字符。
: [[s:块级阶段#块级元素槽位通用的终止界限|通用]]之外的终止界限 :: 某一行之后没_
> 有延续时，那一行的结尾。
; 槽位 :: 上述的开启或延续标记之后，整体填充_
> [[s:块级阶段#块级元素序列|块级元素序列]]。

即使列表项中只包含一个段落，这个段落也会保留，而会不像 CommonMark 或 Djot 那样_
把段落中的内容移到列表项中并去掉那个段落。

== 示例 ==

{{ #Example
|| `input=
* 无序第一项。
* 无序第二项，
> 还是无序第二项。
* 无序第三项。
# 有序第一项。
# > 有序第二项里的块引用，
> > 还在块引用里。
# > 有序第三项里的块引用。
* > ```
> > 新的无序列表第一项中块引用中的代码块。
> > ```
>
> > 又一个块引用。
|| `expected=
<ul>
  <li><p>无序第一项。</p></li>
  <li><p>无序第二项，<br>还是无序第二项。</p></li>
  <li><p>无序第三项。</p></li>
</ul>
<ol>
  <li><p>有序第一项。</p></li>
  <li>
    <blockquote>
      <p>有序第二项里的块引用，<br>还在块引用里。</p>
    </blockquote>
  </li>
  <li>
    <blockquote>
      <p>有序第三项里的块引用。</p>
    </blockquote>
  </li>
</ol>
<ul>
  <li>
    <blockquote><x-code-block info-string="" content="新的无序列表第一项中块引用中的代码块。&#10;"></x-code-block></blockquote>
    <blockquote><p>又一个块引用。</p></blockquote>
  </li>
</ul>
}}
