= 行内阶段 =

行内阶段的语法围绕[[#行内元素|行内元素]]与[[#文本|文本]]展开，相邻的_
[[#行内元素|行内元素]]与[[#文本|文本]]会组成[[#行内序列|行内序列]]。

在[[#适用于行内元素的槽位|适用于行内元素的槽位]]之中，有部分槽位需要填充_
[[#行内序列|行内序列]]。借由这些槽位，块级元素之间能够形成层级结构。

== 行内阶段概念一览 ==

=== 换行 ===

Rotext 采用硬换行，若不使用[[s:行内额外语法一览/行合并标记|行合并标记]]，会保留_
行与行之间的换行。

=== 行内阶段对空白字符的处理 ===

行内阶段源代码中每行开头连续的、未被转义（[[s:全局语法一览/逐字转义|逐字转义]]_
的空格（不能是其它空白字符）都会被无视。

例如：

{{ #Example
|| `input=<``
  第  一  行  <% 有空白 %>
  第  二  行  <% 有空白 %>
    <`  `>第  三  行  <% 有空白 %>
    &#x20;  第  四  行  <% 有空白 %>
``>
|| `expected=
<p>第  一  行  <br>第  二  行  <br>  第  三  行  <br>  第  四  行  </p>
}}

{{ #Example
|| `input=<``
    <`  `>第一段

    &#x20; 第二段
``>
|| `expected=
<p>  第一段</p>
<p>  第二段</p>
}}

=== 行内元素 ===

[*[;行内:Inline][[s:通用概念#元素|元素]]*]对应于 HTML 之中的行内元素。用于展现_
或修饰文档内容。

行内元素不应与通常意义上的 “行” 相混淆。通过硬[[#换行|换行]]，行内序列在实际呈_
现中可以断成多行。

=== 文本 ===

在[[s:行内阶段|行内阶段]]中，[*文本*]是那些渲染结果不存在特殊功能（因而不被解析_
为[[#行内元素|行内元素]]）的内容。渲染得到的文本并不一定逐字对应于源代码中的文_
本，因为文本可以通过[[s:全局语法一览/逐字转义|逐字转义]]产生。

=== 行内序列 ===

[*行内序列*]由一连串相邻的[[#行内元素|行内元素]]与[[#文本|文本]]组成。

=== 适用于行内元素的槽位 ===

根据情况，可以将[*适用于行内元素的[[s:通用概念#槽位|槽位]]*]（以下简称为 “行内_
元素槽位”）能够填充的内容分为以下几类：

* [[#行内序列|行内序列]]、
* [[#行内参数|行内参数]]，以及
* [[s:通用概念#逐字内容|逐字内容]]。

==== 行内元素槽位的分隔符 ====

行内元素[[s:通用概念#槽位的分隔符|槽位的分隔符]]可以插在_
[[s:通用概念#直属|直属]]于它的[[#行内元素|行内元素]]闭合之后，此外，还可以截断_
[[s:通用概念#直属|直属]]于它的[[#文本|文本]]：

{{ #ExampleFixture || `name=两个刮开|| `input=<`
[{#刮开|[{{1}}]}] [{#刮开|[{{2}}]}]
`>
}}

{{ #Example
|| `use fixtures=两个刮开
|| `input=
[{两个刮开 | [*foo*] | [~bar~] [*baz*]}]
|| `expected=
<p><x-scratch-off><strong>foo</strong></x-scratch-off> <x-scratch-off><s>bar</s><strong>baz</strong></x-scratch-off></p>
}}

{{ #Example
|| `use fixtures=两个刮开
|| `input=
[{两个刮开|吃葡萄|不吐葡萄皮。}]
|| `expected=
<p><x-scratch-off>吃葡萄</x-scratch-off> <x-scratch-off>不吐葡萄皮。</x-scratch-off></p>
}}

{{ #Example
|| `input=<`
<% 第二处 “|” 适用于 “span”，而非 “刮开”。 %>
[{#刮开| [{#span|内容}]}]
`>
|| `expected=
<p><x-scratch-off><ruby>某某<rt>mǒu mǒu</rt></ruby></span></p>
}}

若不满足上述条件，潜在分隔符标记保持原样（在预览期间呈现警告）：

{{ #Example
|| `input=
[*加粗里边|分隔符没用。*]
|| `expected=
<p><strong>加粗里边|分隔符没用。</strong></p>
}}

{{ #Example
|| `input=
吃葡萄|不吐葡萄皮。
|| `expected=
<p>吃葡萄|不吐葡萄皮。</p>
}}

==== 行内元素槽位通用的终止界限 ====

行内元素槽位存在多种终止界限：

* 无论是何种行内元素槽位，到达其所属[[s:块级阶段#块级元素|块级元素]]的终止界限_
> 时肯定都要终止：
>
> {{ #Example
> || `input=
> 第一段[`行内代码没闭合，
>
> 但因为第一个段落终止了，那处行内代码也终止了。
> || `expected=
> <p>第一段<code>行内代码没闭合，</code></p>
>
> <p>但因为第一个段落终止了，那处行内代码也终止了。</p>
> }}
>
* 对于有闭合部分或分隔符的行内元素的槽位，到达其所属元素闭合部分或分隔符时要终_
> 止；
>
* 对于除了[[s:行内元素一览/行内代码|行内代码]]之外的行内元素槽位，若其父级元素_
> 为行内元素，到达后者的终止界限时要终止：
>
> {{ #Example
> || `input=
> [*没有闭合的[~删除线*]只延续到包裹它的加粗结束前。
> || `expected=
> <p><strong>没有闭合的<s>删除线</s></strong>只延续到包裹它的加粗结束前。</p>
> }}
>
> * 需要特别注意，对于填充[[s:通用概念#逐字内容|逐字内容]]的行内元素槽位，其所_
> > 属元素外部元素的闭合部分于该逐字内容中无效：
>
> > {{ #Example
> > || `input=
> > [*加粗的闭合部分是[`*]`]*]。
> > || `expected=
> > <p><strong>加粗的闭合部分是<code>*]</code></strong>。</p>
> > }}
>
* 此外，许多行内元素有独自的、与父级无关的规则用于确定其槽位的终止界限，这些规_
> 则会在对应元素的章节中说明。

==== 行内参数 ====

[*行内参数*]是填充进[[s:行内元素一览/行内扩展|行内扩展]]（以及_
[[s:杂项/画饼/设想中的行内嵌入包含相关/行内嵌入包含|设想中的行内嵌入包含]]）之_
槽位的参数。

可以是以下三种中的一种：

* 任意数量的空白、[[s:通用概念#名称|名称]]、任意数量的空白、`=`、任意数量的空白_
> 与[[#行内序列|行内序列]]。
* [[#行内序列|行内序列]]。其等价于值为 “同一组参数中已经出现过的此种参数数目 + _
> 1” 的[[s:通用概念#名称|名称]]、`=`、 [[#行内序列|行内序列]]。
* 任意数量的空白、`` ` ``、[[s:通用概念#名称|名称]]、任意数量的空白、`=`、任意_
> 数量的空白与[[s:通用概念#逐字内容|逐字内容]]。
